#!/usr/bin/env ruby

require 'pathname'
require 'optparse'
require 'fileutils'
require 'shellwords'

BIN_DIR = "#{File.dirname(Pathname.new(__FILE__).realpath)}/bin"

def log_info(msg)
  STDERR.puts "\033[0;32m-- #{msg}\033[0m"
end

def log_error(msg)
  STDERR.puts "\033[0;31m-- #{msg}\033[0m"
end

def bail(msg)
  log_error msg
  exit 1
end

def _log_command(*cmd)
  log_info "Running command: #{File.basename(cmd.slice(0))} #{cmd.slice(1..-1).map { |item| Shellwords.escape(item) }.join(' ')}" if $options[:debug]
end

def _run_command(*cmd)
  system(*cmd) || bail("Command failed with non-zero exit code: #{$?}")
end

def run_command_as_root(*cmd)
  _log_command *cmd
  _run_command *cmd
end

def run_command_as_user(*cmd)
  _log_command *cmd
  _run_command "sudo", "-u", ENV["SUDO_USER"], *cmd
end

$options = {}

OptionParser.new do |o|
  o.on('-i', '--installer PATH', 'Path to the installer app') { |v| $options[:installer_path] = v }
  o.on('-n', '--name NAME', 'Name of the box') { |v| $options[:box_name] = v }
  o.on('-d', '--disk SIZE', 'Size of the disk (specified in GB)') { |v| $options[:disk_size] = v }
  o.on('-m', '--memory SIZE', 'Size of the memory (specified in MB)') { |v| $options[:memory_size] = v }
  o.on('-c', '--cpu COUNT', 'Number of virtual cores') { |v| $options[:cpu_count] = v }
  o.on('-s', '--short NAME', 'Short name of the user') { |v| $options[:short_name] = v }
  o.on('-f', '--full NAME', 'Full name of the user') { |v| $options[:full_name] = v }
  o.on('-p', '--password PASSWORD', 'Password of the user') { |v| $options[:password] = v }
  o.on('--no-auto-login', 'Disable auto login') { |v| $options[:auto_login] = v ? "true" : "false" }
  o.on('--no-gui', 'Disable the GUI') { |v| $options[:gui] = v ? "true" : "false" }
  o.on('--debug', 'Enable debug mode') { |v| $options[:debug] = v }
  o.on('-h', '--help') { puts o; exit }
  o.parse!
  if Process.uid != 0 && (ENV["SUDO_USER"].nil? || ENV["SUDO_USER"].empty?)
  	STDERR.puts "Error: Script must be run as root with sudo."
    STDERR.puts
    STDERR.puts o
    exit 1
  end
end

$options[:installer_path] ||= "/Applications/Install macOS High Sierra.app"

if !File.exists?($options[:installer_path])
  bail "Installer app not found: #{installer_path}"
end

[
  [:disk_size,   "MACINBOX_DISK_SIZE"],
  [:short_name,  "MACINBOX_SHORT_NAME"],
  [:full_name,   "MACINBOX_FULL_NAME"],
  [:gui,         "MACINBOX_GUI"],
  [:password,    "MACINBOX_PASSWORD"],
  [:auto_login,  "MACINBOX_AUTO_LOGIN"],
  [:box_name,    "MACINBOX_BOX_NAME"],
  [:memory_size, "MACINBOX_MEMORY_SIZE"],
  [:cpu_count,   "MACINBOX_CPU_COUNT"],
]
.each do |item|
  ENV[item[1]] = $options[item[0]] unless $options[item[0]].nil?
end

INSTALLER_PATH = $options[:installer_path]
BOX_NAME = $options[:box_name] || "macinbox"

ROOT_TEMP_DIR = `/usr/bin/mktemp -d -t macinbox_root`.chomp
USER_TEMP_DIR = `sudo -u "#{ENV["SUDO_USER"]}" /usr/bin/mktemp -d -t macinbox_user`.chomp

["TERM", "INT", "EXIT"].each do |signal|
  trap signal do
    trap signal, "SYSTEM_DEFAULT" unless signal == "EXIT"
    log_info "Cleaning up..."
    if $options[:debug]
      log_info "Cleaning up skipped in debug mode."
      log_error "WARNING: Temporary files were not removed. Run this command to remove them:"
      log_error "sudo rm -rf #{Shellwords.escape(ROOT_TEMP_DIR)} #{Shellwords.escape(USER_TEMP_DIR)}"
    else
      FileUtils.remove_dir(ROOT_TEMP_DIR)
      FileUtils.remove_dir(USER_TEMP_DIR)
    end
    Process.kill(signal, Process.pid) unless signal == "EXIT"
  end
end

log_info "Creating box..."

Dir.chdir(ROOT_TEMP_DIR) do
  run_command_as_root "#{BIN_DIR}/prepare_image_from_installer.sh", INSTALLER_PATH, "macinbox.dmg"
  run_command_as_root "#{BIN_DIR}/prepare_vmdk_from_image.sh", "macinbox.dmg", "macinbox.vmdk"
  run_command_as_root "#{BIN_DIR}/prepare_box_from_vmdk.sh", "macinbox.vmdk", "macinbox.box"
end

FileUtils.mv "#{ROOT_TEMP_DIR}/macinbox.box", "#{USER_TEMP_DIR}/#{BOX_NAME}.box"
FileUtils.chown ENV["SUDO_USER"], nil, "#{USER_TEMP_DIR}/#{BOX_NAME}.box"

log_info "Adding box to Vagrant..."

Dir.chdir(USER_TEMP_DIR) do
  run_command_as_user "vagrant", "box", "add", "#{BOX_NAME}.box", "--name", BOX_NAME
end
